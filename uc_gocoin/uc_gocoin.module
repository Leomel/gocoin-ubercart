<?php


/**
 * Implementation of hook_menu().
 */
function uc_gocoin_menu() {
    $items['cart/gocoin/complete'] = array(
        'title' => 'Payment complete',
        'page callback' => 'uc_gocoin_complete',
        'access callback' => 'uc_gocoin_completion_access',
        'type' => MENU_CALLBACK,
        'file' => 'uc_gocoin.pages.inc',
    );

    $items['cart/gocoin/callback'] = array(
        'title' => 'Order confirmed',
        'page callback' => 'uc_gocoin_callback',
        'access callback' => 'uc_gocoin_completion_access',
        'type' => MENU_CALLBACK,
        'file' => 'uc_gocoin.pages.inc',
    );
    $items['cart/gocoin/gocoin_redirect'] = array(
        'title' => 'Payment Redirect',
        'page callback' => 'uc_gocoin_redirect',
        'access callback' => 'uc_gocoin_completion_access',
        'type' => MENU_CALLBACK,
        'file' => 'uc_gocoin.pages.inc',
    );
    return $items;
}

// Make sure anyone can complete their 2Checkout orders.
function uc_gocoin_completion_access() {
    return TRUE;
}

/**
 * Implementation of hook_ucga_display().
 */
function uc_gocoin_ucga_display() {
    // Tell UC Google Analytics to display the e-commerce JS on the custom
    // order completion page for this module.
    if (arg(0) == 'cart' && arg(1) == 'gocoin' && arg(2) == 'complete') {
        return TRUE;
    }
}

/**
 * Implementation of hook_form_alter().
 */
function uc_gocoin_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id == 'uc_cart_checkout_review_form' && ($order_id = intval($_SESSION['cart_order'])) > 0) {
        $order = uc_order_load($order_id);

        if ($order->payment_method == 'gocoin') {
            //var_dump($_SESSION);
            unset($form['actions']['submit']);

            $form['#prefix'] = '<table style="display: inline; padding-top: 1em;"><tr><td>';
            $form['#suffix'] = '</td><td>' . @render(drupal_get_form('uc_gocoin_form', $order)) . '</td></tr></table>';
        }
    }
}

/**
 * Implementation of hook_payment_method().
 */
function uc_gocoin_uc_payment_method() {
    $path = base_path() . drupal_get_path('module', 'uc_gocoin');
    $title = variable_get('uc_gocoin_method_title', t('GoCoin'));


    $methods[] = array(
        'id' => 'gocoin',
        'name' => t('GoCoin'),
        'title' => $title . '<br>' . theme('image', array(
            'path' => drupal_get_path('module', 'uc_gocoin') . '/images/logo.png',
            'alt' => $title,
        )),
        'review' => "GoCoin",
        'desc' => t('Redirect to GoCoin payment gate.'),
        'callback' => 'uc_payment_method_gocoin',
        'weight' => 3,
        'checkout' => TRUE,
        'no_gateway' => TRUE,
    );
    return $methods;
}

// Adds Gocoin settings to the payment method settings form.
function uc_payment_method_gocoin($op, &$arg1) {

    $pay_url = 'https://gateway.gocoin.com/merchant/';

    if (version_compare(PHP_VERSION, '5.3.0') >= 0) {
        $php_version_allowed = true;
    } else {
        $php_version_allowed = false;
        drupal_set_message(t('The minimum PHP version required for GoCoin plugin is 5.3.0', array('@modules' => url('admin/modules', array('fragment' => 'edit-modules-ubercart-payment')))), 'warning');
        return false;
    }
    switch ($op) {
        case 'cart-details':
            $build['policy'] = array(
                '#markup' => variable_get('uc_gocoin_policy', 'Continue with checkout to complete GoCoin payment.')
            );
            return $build;

        case 'cart-process':
            $json = array();
            if (isset($arg1) && isset($arg1->order_id)) {
                
                $merchant_id = variable_get('uc_gocoin_client_id', '');
                $access_token = variable_get('uc_gocoin_client_secret_key', '');
                
                if (empty($access_token)) {
                    $msg = 'Improper Gateway set up. API Key not found.';
                    $json['error'] = $msg;
                    uc_order_comment_save($arg1->order_id, 0, t($msg), 'admin');
                    watchdog('GoCoin', $msg,'');
                }
                //Check to make sure we have a merchant ID
                elseif (empty($merchant_id)) {
                    $msg = 'Improper Gateway set up. Merchant ID not found.';
                    $json['error'] = $msg;
                    uc_order_comment_save($arg1->order_id, 0, t($msg), 'admin');
                    watchdog('GoCoin', $msg,'');
                }
                // Proceed
                else {
                    $json['success'] ='true';
                }
            } else {
                $json['error'] = 'Error';
            }
            
            if (isset($json['success']) && !empty($json['success'])) {
                $_SESSION['gocoin_redirect_url'] = $json['success'];
                return TRUE;
            } else {
                $str='';
                if(isset($json['error'])){
                    $str =  $json['error'];
                } 
                form_set_error('uc_gocoin', $str);
                return false;
            }

            return false;

        case 'settings':
            $form['uc_gocoin_client_id'] = array(
                '#type' => 'textfield',
                '#title' => t('Merchant Id'),
                '#description' => t(''),
                '#default_value' => variable_get('uc_gocoin_client_id', ''),
                '#size' => 50,
            );
            $form['uc_gocoin_client_secret_key'] = array(
                '#type' => 'textfield',
                '#title' => t('API Key '),
                '#description' => t(''),
                '#default_value' => variable_get('uc_gocoin_client_secret_key', ''),
                '#size' => 50,
            );


            return $form;
    }
}

function uc_gocoin_form($form_id, $form_state) {

    $order = $form_state['build_info']['args'][0];

    $country = uc_get_country_data(array('country_id' => $order->billing_country));
    if ($country === FALSE) {
        $country = array(0 => array('country_iso_code_3' => 'RUS'));
    }

        

    $form['actions'] = array('#type' => 'actions');
    $form['#method'] = 'POST';
    $form['#action'] = url('cart/gocoin/gocoin_redirect', array('absolute' => TRUE));

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => variable_get('uc_gocoin_checkout_button', t('Place Order')),
    );

    return $form;
}

// for create token button in  admin 

function sign($data, $key) {
    //  $include = array('price_currency','base_price','base_price_currency','order_id','customer_name');
    $include = array('base_price', 'base_price_currency', 'order_id', 'customer_name');
    
    // $data must be an array
    if (is_array($data)) {

        $querystring = "";
        while (count($include) > 0) {
            $k = $include[0];
            if (isset($data[$k])) {
                $querystring .= $k . "=" . $data[$k] . "&";
                array_shift($include);
            } else {
                return false;
            }
        }

        //Strip trailing '&' and lowercase 
        $msg = substr($querystring, 0, strlen($querystring) - 1);
        $msg = strtolower($msg);

        // hash with key
        $hash = hash_hmac("sha256", $msg, $key, true);
        $encoded = base64_encode($hash);
        return $encoded;
    } else {
        return false;
    }
}

